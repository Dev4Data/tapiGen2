/* Formatted on 20/07/2015 12:33:05 (QP5 v5.115.810.9015) */
CREATE OR REPLACE PACKAGE BODY tapi_gen2
AS
   --Global private variables
   g_spec_template   VARCHAR2 (32767);
   g_body_template   CLOB;
   g_vars            teplsql.t_assoc_array;
   g_unque_key       dbo_name_t;


   PROCEDURE load_spec_template
   AS
   BEGIN
      --Spec Template
      g_spec_template :=
         q'^CREATE OR REPLACE PACKAGE tapi_${table_name}
IS
   /**
   -- # TAPI_${table_name}
   -- Generated by: tapiGen2 - DO NOT MODIFY!
   -- Website: github.com/osalvador/tapiGen2
   -- Created On: ${date}
   -- Created By: ${user}
   */

   --Scalar/Column types
   SUBTYPE hash_t IS varchar2 (40);   
   <% DECLARE
     l_template VARCHAR2(32767);
   BEGIN
     l_template := 'SUBTYPE ${column_name} IS ${table_name}.${column_name}%TYPE;';
     tePLSQL.print(tapi_gen2.tab_columns('${table_name}',l_template, CHR(10) || '   '));
   END; %>   

   --Record type
   TYPE ${table_name}_rt
   IS
      RECORD (
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := '${column_name}   ${table_name}.${column_name}%TYPE,';
            tePLSQL.print(tapi_gen2.tab_columns('${table_name}',l_template, CHR(10) || CHR(09) || CHR(09)));
          END; %>
        hash               hash_t,
        row_id            VARCHAR2(64)
      );

   --Collection types (record)
   TYPE ${table_name}_tt IS TABLE OF ${table_name}_rt;

   --Global exceptions
   e_ol_check_failed EXCEPTION; --Optimistic lock check failed
   e_row_missing     EXCEPTION; --The cursor failed to get a row
   e_upd_failed      EXCEPTION; --The update operation failed
   e_del_failed      EXCEPTION; --The delete operation failed

    /**
    --## Function Name: HASH
    --### Description:
    --       This function generates a SHA1 hash for optimistic locking purposes.
    --
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --    
    <% DECLARE
        l_template VARCHAR2(32767);
      BEGIN
        l_template := '--    |p_${column_name} | ${table_name}.${column_name}%TYPE | must be NOT NULL ';
        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) ));
      END; %>    
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   FUNCTION hash (
        <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := 'p_${column_name} IN ${table_name}.${column_name}%TYPE';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09)|| CHR(09) ));
              END; %>)
   RETURN VARCHAR2;

    /**
    --## Function Name: HASH_ROWID
    --### Description:
    --       This function generates a SHA1 hash for optimistic locking purposes.
             Access directly to the row by rowid
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --    
    --    |P_ROWID | VARCHAR2(64)| must be NOT NULL     
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   FUNCTION hash_rowid (p_rowid IN varchar2)
   RETURN varchar2;

    /**
    --## Function Name: RT
    --### Description:
    --       This is a table encapsulation function designed to retrieve information from the ${table_name} table.
    --
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    <% DECLARE
        l_template VARCHAR2(32767);
      BEGIN
        l_template := '--    |p_${column_name} | ${table_name}.${column_name}%TYPE | must be NOT NULL ';
        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) ));
      END; %>        
    --### Return
    --    | Name | Type | Description
    --    | -- | -- | --
    --    |     | ${table_name}_rt |  ${table_name} Record Type 
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   FUNCTION rt (
        <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)));
              END; %>)
      RETURN ${table_name}_rt ${result_cache};

    /**
    --## Function Name: RT_FOR_UPDATE
    --### Description:
    --       This is a table encapsulation function designed to retrieve information
             from the ${table_name} table while placing a lock on it for a potential
             update/delete. Do not use this for updates in web based apps, instead use the 
             rt_for_web_update function to get a FOR_WEB_UPDATE_RT record which
             includes all of the tables columns along with an md5 checksum for use in the
             web_upd and web_del procedures.
    --
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    <% DECLARE
        l_template VARCHAR2(32767);
      BEGIN
        l_template := '--    |p_${column_name} | ${table_name}.${column_name}%TYPE | must be NOT NULL ';
        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) ));
      END; %>        
    --### Return
    --    | Name | Type | Description
    --    | -- | -- | --
    --    |     | ${table_name}_rt |  ${table_name} Record Type 
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   FUNCTION rt_for_update (
     <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)));
              END; %>)
      RETURN ${table_name}_rt ${result_cache};

    /**
    --## Function Name: TT
    --### Description:
    --       This is a table encapsulation function designed to retrieve information from the ${table_name} table.
    --       This function return Record Table as PIPELINED Function
    --
    --### IN Paramters
    --  | Name | Type | Description
    --  | -- | -- | --
    <% DECLARE
        l_template VARCHAR2(32767);
      BEGIN
        l_template := '--    |p_${column_name} | ${table_name}.${column_name}%TYPE | must be NOT NULL ';
        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) ));
      END; %>    
    --### Return
    --  | Name | Type | Description
    --  | -- | -- | --
    --  |     | ${table_name}_tt |  ${table_name} Table Record Type 
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   FUNCTION tt (
        <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE DEFAULT NULL';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)));
              END; %>)
   RETURN ${table_name}_tt
   PIPELINED;

     /**
    --## Function Name: INS
    --### Description:
    --      This is a table encapsulation function designed to insert a row into the ${table_name} table.
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    --   | p_${table_name}_rec | ${table_name}_rt| ${table_name} Record Type 
    --### Return
    --    | Name | Type | Description
    --    | -- | -- | --
    --    | p_${table_name}_rec | ${table_name}_rt |  ${table_name} Record Type 
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   PROCEDURE ins (p_${table_name}_rec IN OUT ${table_name}_rt);

    /**
    --## Function Name: UPD
    --### Description:
    --     his is a table encapsulation function designed to update a row in the ${table_name} table.
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    --   | p_${table_name}_rec | ${table_name}_rt| ${table_name} Record Type
    --   | p_ignore_nulls | BOOLEAN | IF TRUE then null values are ignored in the update         
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   PROCEDURE upd (p_${table_name}_rec IN ${table_name}_rt, p_ignore_nulls IN boolean := FALSE);

    /**
    --## Function Name: UPD_ROWID
    --### Description:
    --     his is a table encapsulation function designed to update a row in the ${table_name} table,
           access directly to the row by rowid
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    --   | p_${table_name}_rec | ${table_name}_rt| ${table_name} Record Type
    --   | p_ignore_nulls | BOOLEAN | IF TRUE then null values are ignored in the update         
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   PROCEDURE upd_rowid (p_${table_name}_rec IN ${table_name}_rt, p_ignore_nulls IN boolean := FALSE);
      
    /**
    --## Function Name: WEB_UPD
    --### Description:
    --      This is a table encapsulation function designed to update a row
            in the ${table_name} table whith optimistic lock validation
    --### IN Paramters
    --  | Name | Type | Description
    --  | -- | -- | --
    --  | p_${table_name}_rec | ${table_name}_rt| ${table_name} Record Type
    --  | p_ignore_nulls | BOOLEAN | IF TRUE then null values are ignored in the update  
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   PROCEDURE web_upd (p_${table_name}_rec IN ${table_name}_rt, p_ignore_nulls IN boolean := FALSE);
   
    /**
    --## Function Name: WEB_UPD_ROWID
    --### Description:
    --      This is a table encapsulation function designed to update a row
            in the ${table_name} table whith optimistic lock validation
            access directly to the row by rowid
    --### IN Paramters
    --  | Name | Type | Description
    --  | -- | -- | --
    --  | p_${table_name}_rec | ${table_name}_rt| ${table_name} Record Type
    --  | p_ignore_nulls | BOOLEAN | IF TRUE then null values are ignored in the update  
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   PROCEDURE web_upd_rowid (p_${table_name}_rec IN ${table_name}_rt, p_ignore_nulls IN boolean := FALSE);   
   
    /**
    --## Function Name: DEL
    --### Description:
    --       This is a table encapsulation function designed to delete a row from the ${table_name} table.
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    <% DECLARE
        l_template VARCHAR2(32767);
      BEGIN
        l_template := '--   |p_${column_name} | ${table_name}.${column_name}%TYPE | must be NOT NULL ';
        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) ));
      END; %> 
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   PROCEDURE del (
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09)|| CHR(09) ));
          END; %>
          );

    /**
    --## Function Name: DEL_ROWID
    --### Description:
    --       This is a table encapsulation function designed to delete a row from the ${table_name} table.
             Access directly to the row by rowid
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    --    |P_ROWID | VARCHAR2(64)| must be NOT NULL
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
    PROCEDURE del_rowid (p_rowid IN VARCHAR2);


    /**
    --## Function Name: WEB_DEL
    --### Description:
    --       This is a table encapsulation function designed to delete a row from the ${table_name} table
    --       whith optimistic lock validation
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    <% DECLARE
        l_template VARCHAR2(32767);
      BEGIN
        l_template := '--    |p_${column_name} | ${table_name}.${column_name}%TYPE | must be NOT NULL ';
        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) ));
      END; %> 
    --   | p_hash | HASH_T | must be NOT NULL    
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   PROCEDURE web_del (
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)));
          END; %>   
      , p_hash IN VARCHAR2);

    /**
    --## Function Name: WEB_DEL_ROWID
    --### Description:
    --       This is a table encapsulation function designed to delete a row from the ${table_name} table
    --       whith optimistic lock validation, access directly to the row by rowid
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    --    |P_ROWID | VARCHAR2(64)| must be NOT NULL
    --   | P_HASH | HASH_T | must be NOT NULL
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
    PROCEDURE web_del_rowid (p_rowid IN varchar2,p_hash IN varchar2);


END tapi_${table_name};^';
   END load_spec_template;

   PROCEDURE load_body_template
   AS
   BEGIN
      g_body_template :=
         q'[
CREATE OR REPLACE PACKAGE BODY tapi_${table_name} IS

   /**
   -- # TAPI_${table_name}
   -- Generated by: tapiGen2 - DO NOT MODIFY!
   -- Website: github.com/osalvador/tapiGen2
   -- Created On: ${date}
   -- Created By: ${user}
   */

    <% IF '${raise_exceptions}' IS NOT NULL
    THEN
        teplsql.print('--Global logger scope
    gc_scope_prefix CONSTANT varchar2(31) := LOWER($$plsql_unit) || ''.'';');
    END IF; %>

   --GLOBAL_PRIVATE_CURSORS
   --By PK
   CURSOR ${table_name}_cur (      
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)  ));
          END; %>
   )
   IS
      SELECT <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := '${column_name}';
                tePLSQL.print(tapi_gen2.tab_columns('${table_name}',l_template, CHR(10) ||  '           , ' ));
              END; %>
           , tapi_${table_name}.hash(<% DECLARE
                                      l_template VARCHAR2(32767);
                                    BEGIN
                                        l_template := '${column_name}';
                                        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ', '));
                                    END; %>)
           , ROWID
      FROM ${table_name}
      WHERE <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := '${column_name} = ${table_name}_cur.p_${column_name}';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' AND ' || CHR(10) || '            ' ));
              END; %>
      FOR UPDATE;

    --By Rowid
    CURSOR ${table_name}_rowid_cur (p_rowid     IN      varchar2)
    IS
      SELECT <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := '${column_name}';
                tePLSQL.print(tapi_gen2.tab_columns('${table_name}',l_template, CHR(10) ||  '           , ' ));
              END; %>
           , tapi_${table_name}.hash(<% DECLARE
                                      l_template VARCHAR2(32767);
                                    BEGIN
                                        l_template := '${column_name}';
                                        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ', '));
                                    END; %>)
           , ROWID
      FROM ${table_name}
      WHERE ROWID = p_rowid
      FOR UPDATE;    


    FUNCTION hash (
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09) ));
          END; %>
          )
      RETURN varchar2
   IS
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
          teplsql.print('l_scope logger_logs.scope%TYPE := gc_scope_prefix || ''hash'';
      l_params logger.tab_param;');
      END IF; %>   
      
      l_retval hash_t;
      l_string CLOB;
   BEGIN       
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
          DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'logger.append_param(l_params, ''p_${column_name}'', p_${column_name});';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) || CHR(09) ));
          END;
      teplsql.print(CHR(10) || '      logger.LOG(''START'', l_scope, NULL, l_params);
      logger.LOG(''Getting row data into one string'', l_scope);');
      END IF; %>
      
      SELECT <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := ' ${column_name} ';
                tePLSQL.print(tapi_gen2.tab_columns_sans_blobs('${table_name}',l_template, '||' || CHR(10) || '              '));
              END; %>
      INTO l_string
      FROM ${table_name}
      WHERE <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := ' ${column_name} =  hash.p_${column_name}';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' AND ' || CHR(10) || '            ' ));
              END; %>;
              
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
        teplsql.print('logger.LOG(''Converting into SHA1 hash'', l_scope);');
      END IF; %>
      l_retval := DBMS_CRYPTO.hash(l_string, DBMS_CRYPTO.hash_sh1);

      <% IF '${raise_exceptions}' IS NOT NULL
      THEN      
        teplsql.print('logger.LOG(''END'', l_scope);');
      END IF; %>
      RETURN l_retval;
   
   <% IF '${raise_exceptions}' IS NOT NULL
   THEN   
       teplsql.print('EXCEPTION
   WHEN OTHERS THEN
      logger.log_error(''Unhandled Exception'', l_scope, NULL, l_params);
      RAISE;');
   END IF; %>
   END hash;
   
    FUNCTION hash_rowid (p_rowid IN varchar2)
      RETURN varchar2
   IS
       <% IF '${raise_exceptions}' IS NOT NULL
      THEN
          teplsql.print('l_scope logger_logs.scope%TYPE := gc_scope_prefix || ''hash_rowid'';
      l_params logger.tab_param;');
      END IF; %>   
      l_retval hash_t;
      l_string CLOB;
   BEGIN
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
      teplsql.print('logger.append_param(l_params, ''p_rowid'', p_rowid);
      logger.LOG(''START'', l_scope, NULL, l_params);
      logger.LOG(''Getting row data into one string'', l_scope);');
      END IF; %>

      SELECT <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := ' ${column_name} ';                
                tePLSQL.print(tapi_gen2.tab_columns_sans_blobs('${table_name}',l_template, '||' || CHR(10) || '              '));
              END; %>
      INTO l_string
      FROM ${table_name}
      WHERE  ROWID = p_rowid;
      
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
        teplsql.print('logger.LOG(''Converting into SHA1 hash'', l_scope);');
      END IF; %>
      l_retval := DBMS_CRYPTO.hash(l_string, DBMS_CRYPTO.hash_sh1);

      <% IF '${raise_exceptions}' IS NOT NULL
      THEN      
        teplsql.print('logger.LOG(''END'', l_scope);');
      END IF; %>
      RETURN l_retval;
   
   <% IF '${raise_exceptions}' IS NOT NULL
   THEN   
       teplsql.print('EXCEPTION
   WHEN OTHERS THEN
      logger.log_error(''Unhandled Exception'', l_scope, NULL, l_params);
      RAISE;');
   END IF; %>
   END hash_rowid;   

   FUNCTION rt (
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)));
          END; %>
          )
      RETURN ${table_name}_rt ${result_cache}
   IS
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
          teplsql.print('l_scope logger_logs.scope%TYPE := gc_scope_prefix || ''rt'';
      l_params logger.tab_param;');
      END IF; %>  
      l_${table_name}_rec ${table_name}_rt;
   BEGIN
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
          DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'logger.append_param(l_params, ''p_${column_name}'', p_${column_name});';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) || CHR(09) ));
          END;
      teplsql.print(CHR(10) || '      logger.LOG(''START'', l_scope, NULL, l_params);
      logger.LOG(''Populating record type from DB'', l_scope);');
      END IF; %>    

      SELECT a.*, tapi_${table_name}.hash(<% DECLARE
                                            l_template VARCHAR2(32767);
                                          BEGIN
                                            l_template := '${column_name}';
                                            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ', '));
                                          END; %>), rowid
      INTO l_${table_name}_rec
      FROM ${table_name} a
      WHERE <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := '${column_name}= rt.p_${column_name}';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' AND ' || CHR(10) ||'            ' ));
              END; %>;

      <% IF '${raise_exceptions}' IS NOT NULL
      THEN      
        teplsql.print('logger.LOG(''END'', l_scope);');
      END IF; %>      
      RETURN l_${table_name}_rec;

   <% IF '${raise_exceptions}' IS NOT NULL
   THEN   
       teplsql.print('EXCEPTION
   WHEN OTHERS THEN
      logger.log_error(''Unhandled Exception'', l_scope, NULL, l_params);
      RAISE;');
   END IF; %>
   END rt;

   FUNCTION rt_for_update (
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)));
          END; %>
          )
      RETURN ${table_name}_rt ${result_cache}
   IS
       <% IF '${raise_exceptions}' IS NOT NULL
      THEN
          teplsql.print('l_scope logger_logs.scope%TYPE := gc_scope_prefix || ''rt_for_update'';
      l_params logger.tab_param;');
      END IF; %>     
      l_${table_name}_rec ${table_name}_rt;
   BEGIN

      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
          DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'logger.append_param(l_params, ''p_${column_name}'', p_${column_name});';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) || CHR(09) ));
          END;
      teplsql.print(CHR(10) || '      logger.LOG(''START'', l_scope, NULL, l_params);
      logger.LOG(''Populating record type from DB'', l_scope);');
      END IF; %>
      
      SELECT a.*, tapi_${table_name}.hash(<% DECLARE
                                            l_template VARCHAR2(32767);
                                          BEGIN
                                            l_template := '${column_name}';
                                            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ', '));
                                          END; %>), rowid
      INTO l_${table_name}_rec
      FROM ${table_name} a
      WHERE <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := '${column_name}= rt_for_update.p_${column_name}';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' AND ' || CHR(10) ||'            ' ));
              END; %>
      FOR UPDATE;

      <% IF '${raise_exceptions}' IS NOT NULL
      THEN      
        teplsql.print('logger.LOG(''END'', l_scope);');
      END IF; %>
      RETURN l_${table_name}_rec;
   
   <% IF '${raise_exceptions}' IS NOT NULL
   THEN   
       teplsql.print('EXCEPTION
   WHEN OTHERS THEN
      logger.log_error(''Unhandled Exception'', l_scope, NULL, l_params);
      RAISE;');
   END IF; %>
   END rt_for_update;

    FUNCTION tt (
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'p_${column_name} IN ${table_name}.${column_name}%TYPE DEFAULT NULL';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)));
          END; %>
              )
       RETURN ${table_name}_tt
       PIPELINED
    IS
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
          teplsql.print('l_scope logger_logs.scope%TYPE := gc_scope_prefix || ''tt'';
      l_params logger.tab_param;');
      END IF; %>      
       l_${table_name}_rec   ${table_name}_rt;
    BEGIN

       <% IF '${raise_exceptions}' IS NOT NULL
       THEN
          DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'logger.append_param(l_params, ''p_${column_name}'', p_${column_name});';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) || CHR(09) ));
          END;
       teplsql.print(CHR(10) || '      logger.LOG(''START'', l_scope, NULL, l_params);
       logger.LOG(''Populating record type from DB'', l_scope);');
       END IF; %>
      
       FOR c1 IN (SELECT   a.*, ROWID
                    FROM   ${table_name} a
                   WHERE <% DECLARE
                            l_template VARCHAR2(32767);
                          BEGIN
                            l_template := '${column_name}= NVL(p_${column_name},${column_name})';
                            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' AND ' || CHR(10) || '                         ' ));
                          END; %>)                   
       LOOP
              <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := 'l_${table_name}_rec.${column_name} := c1.${column_name};';
                tePLSQL.print(tapi_gen2.tab_columns('${table_name}',l_template, CHR(10)|| '              ' ));                
              END; %>
              
              l_${table_name}_rec.hash := tapi_${table_name}.hash(<% DECLARE
                                            l_template VARCHAR2(32767);
                                          BEGIN
                                            l_template := 'c1.${column_name}';
                                            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ', '));
                                          END; %>);
              l_${table_name}_rec.row_id := c1.ROWID;
              PIPE ROW (l_${table_name}_rec);
       END LOOP;

       <% IF '${raise_exceptions}' IS NOT NULL
       THEN      
        teplsql.print('logger.LOG(''END'', l_scope);');
       END IF; %>       
       RETURN;
    
    <% IF '${raise_exceptions}' IS NOT NULL
    THEN   
        teplsql.print('EXCEPTION
    WHEN OTHERS THEN
       logger.log_error(''Unhandled Exception'', l_scope, NULL, l_params);
       RAISE;');
    END IF; %>
    END tt;]';

      g_body_template :=
         g_body_template
         || q'[


    PROCEDURE ins (p_${table_name}_rec IN OUT ${table_name}_rt)
    IS
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
          teplsql.print('l_scope logger_logs.scope%TYPE := gc_scope_prefix || ''ins'';
      l_params logger.tab_param;');
      END IF; %>
             
       l_rowtype     ${table_name}%ROWTYPE;       
       <% IF '${created_by_col_name}' IS NOT NULL 
       OR   '${modified_by_col_name}' IS NOT NULL
       THEN 
            IF '${created_by_col_name}' IS NOT NULL
            then
                tePLSQL.print('l_user_name   ${table_name}.${created_by_col_name}%TYPE := USER;');
                tePLSQL.print(CHR(10)|| '       ');
            ELSE
                tePLSQL.print('l_user_name   ${table_name}.${modified_by_col_name}%TYPE := USER;');
                tePLSQL.print(CHR(10)|| '       ');
            END IF;
       END IF;
       IF '${created_date_col_name}' IS NOT NULL
       Or '${modified_date_col_name}' IS NOT NULL  
       THEN
            IF '${created_date_col_name}' IS NOT NULL
            then 
                tePLSQL.print('l_date        ${table_name}.${created_date_col_name}%TYPE := SYSDATE;');
                tePLSQL.print(CHR(10)|| '       ');
            ELSE
                tePLSQL.print('l_date        ${table_name}.${modified_date_col_name}%TYPE := SYSDATE;');
                tePLSQL.print(CHR(10)|| '       ');
            END IF;
       END IF; %>       
    BEGIN
       <% IF '${raise_exceptions}' IS NOT NULL
       THEN
          DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'logger.append_param(l_params, ''p_${table_name}_rec.p_${column_name}'', p_${table_name}_rec.${column_name});';
            tePLSQL.print(tapi_gen2.tab_columns('${table_name}',l_template, CHR(10) || '       ' ));
          END;
       teplsql.print(CHR(10) || '       logger.LOG(''START'', l_scope, NULL, l_params);
       logger.LOG(''Getting application username or DB username'', l_scope);');
       END IF; %>
      
       <% IF '${created_by_col_name}'IS NOT NULL 
       THEN
        tePLSQL.print('p_${table_name}_rec.${created_by_col_name} := l_user_name;');
        tePLSQL.print(CHR(10)|| '       ');
       END IF;
       IF '${created_date_col_name}' IS NOT NULL 
       THEN 
        tePLSQL.print('p_${table_name}_rec.${created_date_col_name} := l_date;');
        tePLSQL.print(CHR(10)|| '       ');
       END IF;
       IF '${modified_by_col_name}' IS NOT NULL 
       THEN 
        tePLSQL.print('p_${table_name}_rec.${modified_by_col_name} := l_user_name;');
        tePLSQL.print(CHR(10)|| '       ');
       END IF;
       IF '${modified_date_col_name}' IS NOT NULL 
       THEN 
        tePLSQL.print('p_${table_name}_rec.${modified_date_col_name} := l_date;');
        tePLSQL.print(CHR(10)|| '       ');
       END IF; %>
       <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'l_rowtype.${column_name} := p_${table_name}_rec.${column_name}; ';
            tePLSQL.print(tapi_gen2.tab_columns('${table_name}',l_template, CHR(10)|| '       ' ));
          END; %>       
       
       INSERT INTO ${table_name}
         VALUES   l_rowtype;
         
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN      
        teplsql.print('logger.LOG(''END'', l_scope);');
      END IF; %>         
    
    <% IF '${raise_exceptions}' IS NOT NULL
    THEN   
        teplsql.print('EXCEPTION
    WHEN OTHERS THEN
       logger.log_error(''Unhandled Exception'', l_scope, NULL, l_params);
       RAISE;');
    END IF; %>
    END ins;

    PROCEDURE upd (p_${table_name}_rec IN ${table_name}_rt, p_ignore_nulls IN boolean := FALSE)
    IS
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
          teplsql.print('l_scope logger_logs.scope%TYPE := gc_scope_prefix || ''upd'';
      l_params logger.tab_param;');
      END IF; %>
    BEGIN
       <% IF '${raise_exceptions}' IS NOT NULL
       THEN
          DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'logger.append_param(l_params, ''p_${table_name}_rec.p_${column_name}'', p_${table_name}_rec.${column_name});';
            tePLSQL.print(tapi_gen2.tab_columns('${table_name}',l_template, CHR(10) || '       ' ));
          END;
       teplsql.print(CHR(10) || '       logger.LOG(''START'', l_scope, NULL, l_params);
       logger.LOG(''Updating record type and table'', l_scope);');
       END IF; %>
      
       IF NVL (p_ignore_nulls, FALSE)
       THEN
          UPDATE   ${table_name}
             SET   <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = NVL(p_${table_name}_rec.${column_name},${column_name}) ';
                        tePLSQL.print(tapi_gen2.tab_columns_for_upd('${table_name}',l_template, ',' || CHR(10)||'                   ' ));                        
                      END; %>
           WHERE  <% DECLARE
                            l_template VARCHAR2(32767);
                          BEGIN
                            l_template := '${column_name} = p_${table_name}_rec.${column_name}';
                            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' AND ' || CHR(10) || '                  ' ));
                          END; %>;
       ELSE
          UPDATE   ${table_name}
             SET   <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = p_${table_name}_rec.${column_name} ';
                        tePLSQL.print(tapi_gen2.tab_columns_for_upd('${table_name}',l_template, ',' || CHR(10)|| '                   ' ));
                      END; %>            
           WHERE <% DECLARE
                    l_template VARCHAR2(32767);
                  BEGIN
                    l_template := '${column_name} = p_${table_name}_rec.${column_name}';
                    tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' AND ' || CHR(10) || '                 ' ));
                  END; %>;
       END IF;
       
       IF SQL%ROWCOUNT != 1 THEN RAISE e_upd_failed; END IF;
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN      
        teplsql.print('logger.LOG(''END'', l_scope);');
      END IF; %>

    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were updated. The update failed.');
       <% IF '${raise_exceptions}' IS NOT NULL
       THEN   
       teplsql.print('
       WHEN OTHERS THEN
           logger.log_error(''Unhandled Exception'', l_scope, NULL, l_params);
           RAISE;');
       END IF; %>       
    END upd;
    
    
    PROCEDURE upd_rowid (p_${table_name}_rec IN ${table_name}_rt, p_ignore_nulls IN boolean := FALSE)
    IS
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
          teplsql.print('l_scope logger_logs.scope%TYPE := gc_scope_prefix || ''upd_rowid'';
      l_params logger.tab_param;');
      END IF; %>
    BEGIN
       <% IF '${raise_exceptions}' IS NOT NULL
       THEN
          DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'logger.append_param(l_params, ''p_${table_name}_rec.p_${column_name}'', p_${table_name}_rec.${column_name});';
            tePLSQL.print(tapi_gen2.tab_columns('${table_name}',l_template, CHR(10) || '       ' ));
          END;
       teplsql.print(CHR(10) || '       logger.LOG(''START'', l_scope, NULL, l_params);
       logger.LOG(''Updating record type and table'', l_scope);');
       END IF; %>
      
       IF NVL (p_ignore_nulls, FALSE)
       THEN
          UPDATE   ${table_name}
             SET   <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = NVL(p_${table_name}_rec.${column_name},${column_name}) ';
                        tePLSQL.print(tapi_gen2.tab_columns_for_upd('${table_name}',l_template, ',' || CHR(10)||'                   ' ));
                      END; %>
           WHERE  ROWID = p_${table_name}_rec.row_id;
       ELSE
          UPDATE   ${table_name}
             SET   <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = p_${table_name}_rec.${column_name} ';
                        tePLSQL.print(tapi_gen2.tab_columns_for_upd('${table_name}',l_template, ',' || CHR(10)|| '                   ' ));
                      END; %>            
           WHERE  ROWID = p_${table_name}_rec.row_id;
       END IF;
       
       IF SQL%ROWCOUNT != 1 THEN RAISE e_upd_failed; END IF;
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN      
        teplsql.print('logger.LOG(''END'', l_scope);');
      END IF; %>

    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were updated. The update failed.');
       <% IF '${raise_exceptions}' IS NOT NULL
       THEN   
       teplsql.print('
       WHEN OTHERS THEN
           logger.log_error(''Unhandled Exception'', l_scope, NULL, l_params);
           RAISE;');
       END IF; %>       
    END upd_rowid;

   PROCEDURE web_upd (
      p_${table_name}_rec    IN ${table_name}_rt
    , p_ignore_nulls         IN boolean := FALSE
   )
   IS
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
          teplsql.print('l_scope logger_logs.scope%TYPE := gc_scope_prefix || ''web_upd'';
      l_params logger.tab_param;');
      END IF; %>
      l_${table_name}_rec ${table_name}_rt;
   BEGIN
       <% IF '${raise_exceptions}' IS NOT NULL
       THEN
          DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'logger.append_param(l_params, ''p_${table_name}_rec.p_${column_name}'', p_${table_name}_rec.${column_name});';
            tePLSQL.print(tapi_gen2.tab_columns('${table_name}',l_template, CHR(10) || '       ' ));
          END;
       teplsql.print(CHR(10) || '       logger.LOG(''START'', l_scope, NULL, l_params);
       logger.LOG(''Updating record type and table'', l_scope);');
       END IF; %>
       
      OPEN ${table_name}_cur(<% DECLARE
                                l_template VARCHAR2(32767);
                              BEGIN
                                l_template := 'p_${table_name}_rec.${column_name}';
                                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' , ' ));
                              END; %>);
                              
      FETCH ${table_name}_cur INTO l_${table_name}_rec;

      IF ${table_name}_cur%NOTFOUND THEN
         CLOSE ${table_name}_cur;
         RAISE e_row_missing;
      ELSE
         IF p_${table_name}_rec.hash != l_${table_name}_rec.hash THEN
            CLOSE ${table_name}_cur;
            RAISE e_ol_check_failed;
         ELSE
            IF NVL(p_ignore_nulls, FALSE)
            THEN
                UPDATE   ${table_name}
                   SET   <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = NVL(p_${table_name}_rec.${column_name},${column_name}) ';
                        tePLSQL.print(tapi_gen2.tab_columns_for_upd('${table_name}',l_template, ',' || CHR(10)||'                   ' ));
                      END; %>                                     
               WHERE CURRENT OF ${table_name}_cur;
            ELSE
                UPDATE   ${table_name}
                   SET   <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = p_${table_name}_rec.${column_name} ';
                        tePLSQL.print(tapi_gen2.tab_columns_for_upd('${table_name}',l_template, ',' || CHR(10)|| '                   ' ));
                      END; %>   
               WHERE CURRENT OF ${table_name}_cur;
            END IF;

            CLOSE ${table_name}_cur;
         END IF;
      END IF;

      <% IF '${raise_exceptions}' IS NOT NULL
      THEN      
        teplsql.print('logger.LOG(''END'', l_scope);');
      END IF; %>

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
     <% IF '${raise_exceptions}' IS NOT NULL
     THEN   
     teplsql.print('
     WHEN OTHERS THEN
         logger.log_error(''Unhandled Exception'', l_scope, NULL, l_params);
         RAISE;');
     END IF; %>
   END web_upd;
   
   PROCEDURE web_upd_rowid (
      p_${table_name}_rec    IN ${table_name}_rt
    , p_ignore_nulls         IN boolean := FALSE
   )
   IS
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
          teplsql.print('l_scope logger_logs.scope%TYPE := gc_scope_prefix || ''web_upd_rowid'';
      l_params logger.tab_param;');
      END IF; %>
      l_${table_name}_rec ${table_name}_rt;
   BEGIN
       <% IF '${raise_exceptions}' IS NOT NULL
       THEN
          DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'logger.append_param(l_params, ''p_${table_name}_rec.p_${column_name}'', p_${table_name}_rec.${column_name});';
            tePLSQL.print(tapi_gen2.tab_columns('${table_name}',l_template, CHR(10) || '       ' ));
          END;
       teplsql.print(CHR(10) || '       logger.LOG(''START'', l_scope, NULL, l_params);
       logger.LOG(''Updating record type and table'', l_scope);');
       END IF; %>
       
      OPEN ${table_name}_rowid_cur(p_${table_name}_rec.row_id);
                              
      FETCH ${table_name}_rowid_cur INTO l_${table_name}_rec;

      IF ${table_name}_rowid_cur%NOTFOUND THEN
         CLOSE ${table_name}_rowid_cur;
         RAISE e_row_missing;
      ELSE
         IF p_${table_name}_rec.hash != l_${table_name}_rec.hash THEN
            CLOSE ${table_name}_rowid_cur;
            RAISE e_ol_check_failed;
         ELSE
            IF NVL(p_ignore_nulls, FALSE)
            THEN
                UPDATE   ${table_name}
                     SET  <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = NVL(p_${table_name}_rec.${column_name},${column_name}) ';
                        tePLSQL.print(tapi_gen2.tab_columns_for_upd('${table_name}',l_template, ',' || CHR(10)||'                          ' ));
                      END; %>                                     
               WHERE CURRENT OF ${table_name}_rowid_cur;
            ELSE
                UPDATE   ${table_name}
                 SET  <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = p_${table_name}_rec.${column_name} ';
                        tePLSQL.print(tapi_gen2.tab_columns_for_upd('${table_name}',l_template, ',' || CHR(10)|| '                      ' ));
                      END; %>   
               WHERE CURRENT OF ${table_name}_rowid_cur;
            END IF;

            CLOSE ${table_name}_rowid_cur;
         END IF;
      END IF;

      <% IF '${raise_exceptions}' IS NOT NULL
      THEN      
        teplsql.print('logger.LOG(''END'', l_scope);');
      END IF; %>


   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
     <% IF '${raise_exceptions}' IS NOT NULL
     THEN   
     teplsql.print('
     WHEN OTHERS THEN
         logger.log_error(''Unhandled Exception'', l_scope, NULL, l_params);
         RAISE;');
     END IF; %>
   END web_upd_rowid;   

    PROCEDURE del (
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'p_${column_name} IN ${table_name}.${column_name}%TYPE';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09)|| CHR(09) ));
          END; %>
              )
    IS
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
          teplsql.print('l_scope logger_logs.scope%TYPE := gc_scope_prefix || ''del'';
      l_params logger.tab_param;');
      END IF; %>
    BEGIN
       <% IF '${raise_exceptions}' IS NOT NULL
       THEN
          DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'logger.append_param(l_params, ''p_${column_name}'', p_${column_name});';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) || CHR(09) ));
          END;
       teplsql.print(CHR(10) || '      logger.LOG(''START'', l_scope, NULL, l_params);
       logger.LOG(''Getting row data into one string'', l_scope);');
       END IF; %>
       
       DELETE FROM   ${table_name}
             WHERE   <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = del.p_${column_name}';
                        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' AND ' || CHR(10) || '                     ' ));
                      END; %>;
       IF sql%ROWCOUNT != 1
       THEN
          RAISE e_del_failed;
       END IF;
    
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN      
        teplsql.print('logger.LOG(''END'', l_scope);');
      END IF; %>    
    
    
    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were deleted. The delete failed.');
       <% IF '${raise_exceptions}' IS NOT NULL
       THEN   
       teplsql.print('
       WHEN OTHERS THEN
           logger.log_error(''Unhandled Exception'', l_scope, NULL, l_params);
           RAISE;');
       END IF; %>          
    END del;
    
    PROCEDURE del_rowid (p_rowid IN varchar2)
    IS
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
          teplsql.print('l_scope logger_logs.scope%TYPE := gc_scope_prefix || ''del_rowid'';
      l_params logger.tab_param;');
      END IF; %>
    BEGIN
       <% IF '${raise_exceptions}' IS NOT NULL
       THEN
       teplsql.print('logger.append_param(l_params, ''p_rowid'', p_rowid);
       logger.LOG(''START'', l_scope, NULL, l_params);
       logger.LOG(''Deleting record from table'', l_scope);');
       END IF; %>
       
       DELETE FROM   ${table_name}
             WHERE   ROWID = p_rowid;
             
       IF sql%ROWCOUNT != 1
       THEN
          RAISE e_del_failed;
       END IF;
       
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN      
        teplsql.print('logger.LOG(''END'', l_scope);');
      END IF; %>    
    
    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were deleted. The delete failed.');
       <% IF '${raise_exceptions}' IS NOT NULL
       THEN   
       teplsql.print('
       WHEN OTHERS THEN
           logger.log_error(''Unhandled Exception'', l_scope, NULL, l_params);
           RAISE;');
       END IF; %>       
    END del_rowid;    
                        
    PROCEDURE web_del (
        <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := 'p_${column_name} IN ${table_name}.${column_name}%TYPE';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)));
              END; %>
      , p_hash IN varchar2
   )
   IS
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
          teplsql.print('l_scope logger_logs.scope%TYPE := gc_scope_prefix || ''web_del'';
      l_params logger.tab_param;');
      END IF; %>
      l_${table_name}_rec ${table_name}_rt;
   BEGIN

      <% IF '${raise_exceptions}' IS NOT NULL
       THEN
          DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'logger.append_param(l_params, ''p_${column_name}'', p_${column_name});';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) || CHR(09) ));
          END;
       teplsql.print(CHR(10) || '      logger.LOG(''START'', l_scope, NULL, l_params);
       logger.LOG(''Deleting record from table'', l_scope);');
       END IF; %>
       
      OPEN ${table_name}_cur(<% DECLARE
                                l_template VARCHAR2(32767);
                              BEGIN
                                l_template := 'web_del.p_${column_name}';
                                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ', ' ));
                              END; %>);
                              
      FETCH ${table_name}_cur INTO l_${table_name}_rec;

      IF ${table_name}_cur%NOTFOUND THEN
         CLOSE ${table_name}_cur;
         RAISE e_row_missing;
      ELSE
         IF p_hash != l_${table_name}_rec.hash THEN
            CLOSE ${table_name}_cur;
            RAISE e_ol_check_failed;
         ELSE
            DELETE FROM ${table_name}
            WHERE CURRENT OF ${table_name}_cur;

            CLOSE ${table_name}_cur;
         END IF;
      END IF;


      <% IF '${raise_exceptions}' IS NOT NULL
      THEN      
        teplsql.print('logger.LOG(''END'', l_scope);');
      END IF; %>

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
       <% IF '${raise_exceptions}' IS NOT NULL
       THEN   
       teplsql.print('
       WHEN OTHERS THEN
           logger.log_error(''Unhandled Exception'', l_scope, NULL, l_params);
           RAISE;');
       END IF; %>
   END web_del;

   PROCEDURE web_del_rowid (p_rowid IN varchar2, p_hash IN varchar2)
   IS
      <% IF '${raise_exceptions}' IS NOT NULL
      THEN
          teplsql.print('l_scope logger_logs.scope%TYPE := gc_scope_prefix || ''web_del_rowid'';
      l_params logger.tab_param;');
      END IF; %>
      l_${table_name}_rec ${table_name}_rt;
   BEGIN

      <% IF '${raise_exceptions}' IS NOT NULL
       THEN
       teplsql.print('logger.append_param(l_params, ''p_rowid'', p_rowid);
       logger.LOG(''START'', l_scope, NULL, l_params);
       logger.LOG(''Deleting record from table'', l_scope);');
       END IF; %>
       
      OPEN ${table_name}_rowid_cur(web_del_rowid.p_rowid);
                              
      FETCH ${table_name}_rowid_cur INTO l_${table_name}_rec;

      IF ${table_name}_rowid_cur%NOTFOUND THEN
         CLOSE ${table_name}_rowid_cur;
         RAISE e_row_missing;
      ELSE
         IF web_del_rowid.p_hash != l_${table_name}_rec.hash THEN
            CLOSE ${table_name}_rowid_cur;
            RAISE e_ol_check_failed;
         ELSE
            DELETE FROM ${table_name}
            WHERE CURRENT OF ${table_name}_rowid_cur;

            CLOSE ${table_name}_rowid_cur;
         END IF;
      END IF;

      <% IF '${raise_exceptions}' IS NOT NULL
      THEN      
        teplsql.print('logger.LOG(''END'', l_scope);');
      END IF; %>

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
       <% IF '${raise_exceptions}' IS NOT NULL
       THEN   
       teplsql.print('
       WHEN OTHERS THEN
           logger.log_error(''Unhandled Exception'', l_scope, NULL, l_params);
           RAISE;');
       END IF; %>
   END web_del_rowid;

END tapi_${table_name};]';
   END load_body_template;


   PROCEDURE create_tapi_package (p_table_name               IN VARCHAR2
                                , p_compile_table_api        IN BOOLEAN DEFAULT TRUE
                                , p_unique_key               IN VARCHAR2 DEFAULT NULL
                                , p_created_by_col_name      IN VARCHAR2 DEFAULT NULL
                                , p_created_date_col_name    IN VARCHAR2 DEFAULT NULL
                                , p_modified_by_col_name     IN VARCHAR2 DEFAULT NULL
                                , p_modified_date_col_name   IN VARCHAR2 DEFAULT NULL
                                , p_raise_exceptions         IN BOOLEAN DEFAULT FALSE )
   AS
      l_count        PLS_INTEGER := 0;
      l_table_name   dbo_name_t := LOWER (p_table_name);
   BEGIN
      /*Validations*/

      --check_table_exists
      SELECT   COUNT ( * )
        INTO   l_count
        FROM   user_tables
       WHERE   UPPER (table_name) = UPPER (l_table_name);

      IF l_count = 0
      THEN
         raise_application_error (-20000, 'Table ' || l_table_name || ' does not exist!');
      END IF;

      --Check table hash PK or p_unique_key is not null
      IF p_unique_key IS NULL
      THEN
         SELECT   COUNT ( * )
           INTO   l_count
           FROM   user_constraints
          WHERE   UPPER (table_name) = UPPER (l_table_name) AND constraint_type = 'P';

         IF l_count = 0
         THEN
            raise_application_error (-20000
                                   ,    'Table '
                                     || l_table_name
                                     || ' does not have a Primary Key'
                                     || ' and P_UNIQUE_KEY parameter is null');
         END IF;
      END IF;

      --Init variables for render template
      g_vars ('date') := TO_CHAR (SYSDATE, 'DD-MON-YYYY HH24:MI');
      g_vars ('table_name') := l_table_name;
      g_vars ('user') := USER;
      g_vars ('created_by_col_name') := p_created_by_col_name;
      g_vars ('created_date_col_name') := p_created_date_col_name;
      g_vars ('modified_by_col_name') := p_modified_by_col_name;
      g_vars ('modified_date_col_name') := p_modified_date_col_name;
      g_vars ('result_cache') := 'RESULT_CACHE';

      IF p_raise_exceptions
      THEN
         g_vars ('raise_exceptions') := 'TRUE';
      ELSE
         g_vars ('raise_exceptions') := '';
      END IF;

      --If the table hash LOBS columns, disable result_cache.
      FOR c1 IN (SELECT   *
                   FROM   user_tab_cols
                  WHERE   table_name = UPPER (l_table_name) AND data_type IN ('BLOB', 'CLOB'))
      LOOP
         g_vars ('result_cache') := '';
      END LOOP;

      --Define unique key if table don't hace primary key
      g_unque_key := p_unique_key;

      -- Spec --
      --Render template
      load_spec_template;
      g_spec_template := teplsql.render (g_spec_template, g_vars);

      -- Body --
      --Render template
      load_body_template;
      g_body_template := teplsql.render (g_body_template, g_vars);

      IF p_compile_table_api
      THEN
         BEGIN
            EXECUTE IMMEDIATE g_spec_template;
         EXCEPTION
            WHEN OTHERS
            THEN
               raise_application_error (-20000, 'Spec compiled with error(s)! ' || SQLERRM);
         END;

         BEGIN
            EXECUTE IMMEDIATE g_body_template;
         EXCEPTION
            WHEN OTHERS
            THEN
               raise_application_error (-20000, ' Body compiled with error(s)! ' || SQLERRM);
         END;

         DBMS_OUTPUT.put_line('Creation of Table API package for ' || l_table_name || ' table completed successfully!');
      ELSE
         DBMS_OUTPUT.put_line (g_spec_template);
         DBMS_OUTPUT.put_line (g_body_template);
      END IF;
   END create_tapi_package;

   FUNCTION pk_col_name (p_table_name IN VARCHAR2)
      RETURN dbo_name_aat
      PIPELINED
   IS
      l_retval   dbo_name_t;
   BEGIN
      IF g_unque_key IS NOT NULL
      THEN
         PIPE ROW (LOWER (g_unque_key));
      ELSE
         FOR c1 IN (SELECT   LOWER (column_name) column_name
                      FROM   user_cons_columns
                     WHERE   UPPER (table_name) = UPPER (p_table_name)
                             AND constraint_name IN (SELECT   constraint_name
                                                       FROM   user_constraints
                                                      WHERE   constraint_type = 'P'))
         LOOP
            l_retval    := c1.column_name;
            PIPE ROW (l_retval);
         END LOOP;
      END IF;

      RETURN;
   END pk_col_name;


   FUNCTION tab_columns (p_table_name IN VARCHAR2, p_template IN VARCHAR2, p_delimiter IN VARCHAR2)
      RETURN VARCHAR2
   AS
      l_return   VARCHAR2 (32767);
      l_cont     PLS_INTEGER := 0;
   BEGIN
      FOR c1 IN (  SELECT   LOWER (column_name) column_name
                     FROM   user_tab_columns
                    WHERE   table_name = UPPER (p_table_name)
                 ORDER BY   column_id)
      LOOP
         l_cont      := l_cont + 1;

         IF l_cont > 1
         THEN
            l_return    := l_return || p_delimiter;
         END IF;

         l_return    := l_return || REPLACE (p_template, '${column_name}', c1.column_name);
      END LOOP;

      RETURN l_return;
   END tab_columns;

   FUNCTION pk_columns (p_table_name IN VARCHAR2, p_template IN VARCHAR2, p_delimiter IN VARCHAR2)
      RETURN VARCHAR2
   AS
      l_return   VARCHAR2 (32767);
      l_cont     PLS_INTEGER := 0;
   BEGIN
      FOR c1 IN (SELECT   COLUMN_VALUE column_name FROM table (tapi_gen2.pk_col_name (p_table_name)))
      LOOP
         l_cont      := l_cont + 1;

         IF l_cont > 1
         THEN
            l_return    := l_return || p_delimiter;
         END IF;

         l_return    := l_return || REPLACE (p_template, '${column_name}', c1.column_name);
      END LOOP;

      RETURN l_return;
   END pk_columns;


   FUNCTION tab_columns_sans_blobs (p_table_name IN VARCHAR2, p_template IN VARCHAR2, p_delimiter IN VARCHAR2)
      RETURN VARCHAR2
   AS
      l_return   VARCHAR2 (32767);
      l_cont     PLS_INTEGER := 0;
   BEGIN
      FOR c1 IN (  SELECT   LOWER (column_name) column_name
                     FROM   user_tab_columns
                    WHERE   table_name = UPPER (p_table_name)
                            AND column_name NOT IN (SELECT   column_name
                                                      FROM   user_tab_cols
                                                     WHERE   table_name = UPPER (p_table_name) AND data_type = 'BLOB')
                 ORDER BY   column_id)
      LOOP
         l_cont      := l_cont + 1;

         IF l_cont > 1
         THEN
            l_return    := l_return || p_delimiter;
         END IF;

         l_return    := l_return || REPLACE (p_template, '${column_name}', c1.column_name);
      END LOOP;

      RETURN l_return;
   END tab_columns_sans_blobs;

   FUNCTION tab_columns_for_upd (p_table_name IN VARCHAR2, p_template IN VARCHAR2, p_delimiter IN VARCHAR2)
      RETURN VARCHAR2
   AS
      l_return   VARCHAR2 (32767);
      l_cont     PLS_INTEGER := 0;
   BEGIN
      FOR c1 IN (  SELECT   LOWER (column_name) column_name
                     FROM   user_tab_columns
                    WHERE   table_name = UPPER (p_table_name)
                 ORDER BY   column_id)
      LOOP
         l_cont      := l_cont + 1;

         IF (g_vars ('created_by_col_name') <> c1.column_name OR g_vars ('created_by_col_name') IS NULL)
            AND (g_vars('created_date_col_name') <> c1.column_name OR g_vars ('created_date_col_name') IS NULL)
         THEN
            IF l_cont > 1
            THEN
               l_return    := l_return || p_delimiter;
            END IF;


            IF g_vars ('modified_by_col_name') = c1.column_name
            THEN
               l_return    :=
                  l_return || c1.column_name || ' = USER /*dbax_core.g$username or apex_application.g_user*/';
            ELSIF g_vars ('modified_date_col_name') = c1.column_name
            THEN
               l_return    := l_return || c1.column_name || ' = SYSDATE';
            ELSE
               l_return    := l_return || REPLACE (p_template, '${column_name}', c1.column_name);
            END IF;
         END IF;
      END LOOP;

      RETURN l_return;
   END tab_columns_for_upd;
END tapi_gen2;
/