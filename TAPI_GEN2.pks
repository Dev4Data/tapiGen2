CREATE OR REPLACE PACKAGE tapi_gen2
AS

   /**
   -- # TAPI_GEN2
   -- Generated by: Oscar Salvador Magallanes
   -- Website: github.com/osalvador/tapiGen2
   -- Created On: 16-JUL-2015
   */

   --Spec Template
   g_spec_template CONSTANT VARCHAR2 (32767)
         := q'^CREATE OR REPLACE PACKAGE tapi_${table_name}
IS
   /**
   -- # TAPI_${table_name}
   -- Generated by: tapiGen2 - DO NOT MODIFY!
   -- Website: github.com/osalvador/tapiGen2
   -- Created On: ${date}
   -- Created By: ${user}
   */

   --Scalar/Column types
   SUBTYPE hash_t IS varchar2 (40);   
   <% DECLARE
     l_template VARCHAR2(32767);
   BEGIN
     l_template := 'SUBTYPE ${column_name} IS ${table_name}.${column_name}%TYPE;';
     tePLSQL.print(tapi_gen2.tab_columns('${table_name}',l_template, CHR(10) || '   '));
   END; %>   

   --Record type
   TYPE ${table_name}_rt
   IS
      RECORD (
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := '${column_name}   ${table_name}.${column_name}%TYPE,';
            tePLSQL.print(tapi_gen2.tab_columns('${table_name}',l_template, CHR(10) || CHR(09) || CHR(09)));
          END; %>
        hash               hash_t,
        row_id            VARCHAR2(64)
      );

   --Collection types (record)
   TYPE ${table_name}_tt IS TABLE OF ${table_name}_rt;

   --Global exceptions
   e_ol_check_failed EXCEPTION; --Optimistic lock check failed
   e_row_missing     EXCEPTION; --The cursor failed to get a row
   e_upd_failed      EXCEPTION; --The update operation failed
   e_del_failed      EXCEPTION; --The delete operation failed

    /**
    --## Function Name: HASH
    --### Description:
    --       This function generates a SHA1 hash for optimistic locking purposes.
    --
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --    
    <% DECLARE
        l_template VARCHAR2(32767);
      BEGIN
        l_template := '--    |p_${column_name} | ${table_name}.${column_name}%TYPE | must be NOT NULL ';
        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) ));
      END; %>    
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   FUNCTION hash (
        <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := 'p_${column_name} IN ${table_name}.${column_name}%TYPE';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09)|| CHR(09) ));
              END; %>)
   RETURN VARCHAR2;

    /**
    --## Function Name: HASH_ROWID
    --### Description:
    --       This function generates a SHA1 hash for optimistic locking purposes.
             Access directly to the row by rowid
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --    
    --    |P_ROWID | VARCHAR2(64)| must be NOT NULL     
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   FUNCTION hash_rowid (p_rowid IN varchar2)
   RETURN varchar2;

    /**
    --## Function Name: RT
    --### Description:
    --       This is a table encapsulation function designed to retrieve information from the ${table_name} table.
    --
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    <% DECLARE
        l_template VARCHAR2(32767);
      BEGIN
        l_template := '--    |p_${column_name} | ${table_name}.${column_name}%TYPE | must be NOT NULL ';
        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) ));
      END; %>        
    --### Return
    --    | Name | Type | Description
    --    | -- | -- | --
    --    |     | ${table_name}_rt |  ${table_name} Record Type 
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   FUNCTION rt (
        <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)));
              END; %>)
      RETURN ${table_name}_rt ${result_cache};

    /**
    --## Function Name: RT_FOR_UPDATE
    --### Description:
    --       This is a table encapsulation function designed to retrieve information
             from the ${table_name} table while placing a lock on it for a potential
             update/delete. Do not use this for updates in web based apps, instead use the 
             rt_for_web_update function to get a FOR_WEB_UPDATE_RT record which
             includes all of the tables columns along with an md5 checksum for use in the
             web_upd and web_del procedures.
    --
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    <% DECLARE
        l_template VARCHAR2(32767);
      BEGIN
        l_template := '--    |p_${column_name} | ${table_name}.${column_name}%TYPE | must be NOT NULL ';
        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) ));
      END; %>        
    --### Return
    --    | Name | Type | Description
    --    | -- | -- | --
    --    |     | ${table_name}_rt |  ${table_name} Record Type 
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   FUNCTION rt_for_update (
     <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)));
              END; %>)
      RETURN ${table_name}_rt ${result_cache};

    /**
    --## Function Name: TT
    --### Description:
    --       This is a table encapsulation function designed to retrieve information from the ${table_name} table.
    --       This function return Record Table as PIPELINED Function
    --
    --### IN Paramters
    --  | Name | Type | Description
    --  | -- | -- | --
    <% DECLARE
        l_template VARCHAR2(32767);
      BEGIN
        l_template := '--    |p_${column_name} | ${table_name}.${column_name}%TYPE | must be NOT NULL ';
        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) ));
      END; %>    
    --### Return
    --  | Name | Type | Description
    --  | -- | -- | --
    --  |     | ${table_name}_tt |  ${table_name} Table Record Type 
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   FUNCTION tt (
        <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE DEFAULT NULL';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)));
              END; %>)
   RETURN ${table_name}_tt
   PIPELINED;

     /**
    --## Function Name: INS
    --### Description:
    --      This is a table encapsulation function designed to insert a row into the ${table_name} table.
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    --   | p_${table_name}_rec | ${table_name}_rt| ${table_name} Record Type 
    --### Return
    --    | Name | Type | Description
    --    | -- | -- | --
    --    | p_${table_name}_rec | ${table_name}_rt |  ${table_name} Record Type 
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   PROCEDURE ins (p_${table_name}_rec IN OUT ${table_name}_rt);

    /**
    --## Function Name: UPD
    --### Description:
    --     his is a table encapsulation function designed to update a row in the ${table_name} table.
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    --   | p_${table_name}_rec | ${table_name}_rt| ${table_name} Record Type
    --   | p_ignore_nulls | BOOLEAN | IF TRUE then null values are ignored in the update         
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   PROCEDURE upd (p_${table_name}_rec IN ${table_name}_rt, p_ignore_nulls IN boolean := FALSE);

    /**
    --## Function Name: UPD_ROWID
    --### Description:
    --     his is a table encapsulation function designed to update a row in the ${table_name} table,
           access directly to the row by rowid
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    --   | p_${table_name}_rec | ${table_name}_rt| ${table_name} Record Type
    --   | p_ignore_nulls | BOOLEAN | IF TRUE then null values are ignored in the update         
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   PROCEDURE upd_rowid (p_${table_name}_rec IN ${table_name}_rt, p_ignore_nulls IN boolean := FALSE);
      
    /**
    --## Function Name: WEB_UPD
    --### Description:
    --      This is a table encapsulation function designed to update a row
            in the ${table_name} table whith optimistic lock validation
    --### IN Paramters
    --  | Name | Type | Description
    --  | -- | -- | --
    --  | p_${table_name}_rec | ${table_name}_rt| ${table_name} Record Type
    --  | p_ignore_nulls | BOOLEAN | IF TRUE then null values are ignored in the update  
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   PROCEDURE web_upd (p_${table_name}_rec IN ${table_name}_rt, p_ignore_nulls IN boolean := FALSE);
   
    /**
    --## Function Name: WEB_UPD_ROWID
    --### Description:
    --      This is a table encapsulation function designed to update a row
            in the ${table_name} table whith optimistic lock validation
            access directly to the row by rowid
    --### IN Paramters
    --  | Name | Type | Description
    --  | -- | -- | --
    --  | p_${table_name}_rec | ${table_name}_rt| ${table_name} Record Type
    --  | p_ignore_nulls | BOOLEAN | IF TRUE then null values are ignored in the update  
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   PROCEDURE web_upd_rowid (p_${table_name}_rec IN ${table_name}_rt, p_ignore_nulls IN boolean := FALSE);   
   
    /**
    --## Function Name: DEL
    --### Description:
    --       This is a table encapsulation function designed to delete a row from the ${table_name} table.
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    <% DECLARE
        l_template VARCHAR2(32767);
      BEGIN
        l_template := '--   |p_${column_name} | ${table_name}.${column_name}%TYPE | must be NOT NULL ';
        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) ));
      END; %> 
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   PROCEDURE del (
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09)|| CHR(09) ));
          END; %>
          );

    /**
    --## Function Name: DEL_ROWID
    --### Description:
    --       This is a table encapsulation function designed to delete a row from the ${table_name} table.
             Access directly to the row by rowid
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    --    |P_ROWID | VARCHAR2(64)| must be NOT NULL
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
    PROCEDURE del_rowid (p_rowid IN VARCHAR2);


    /**
    --## Function Name: WEB_DEL
    --### Description:
    --       This is a table encapsulation function designed to delete a row from the ${table_name} table
    --       whith optimistic lock validation
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    <% DECLARE
        l_template VARCHAR2(32767);
      BEGIN
        l_template := '--    |p_${column_name} | ${table_name}.${column_name}%TYPE | must be NOT NULL ';
        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, CHR(10) || CHR(09) ));
      END; %> 
    --   | p_hash | HASH_T | must be NOT NULL    
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
   PROCEDURE web_del (
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)));
          END; %>   
      , p_hash IN VARCHAR2);

    /**
    --## Function Name: WEB_DEL_ROWID
    --### Description:
    --       This is a table encapsulation function designed to delete a row from the ${table_name} table
    --       whith optimistic lock validation, access directly to the row by rowid
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --
    --    |P_ROWID | VARCHAR2(64)| must be NOT NULL
    --   | P_HASH | HASH_T | must be NOT NULL
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|${date}   | ${user} | Created
    */
    PROCEDURE web_del_rowid (p_rowid IN varchar2,p_hash IN varchar2);


END tapi_${table_name};^' ;
   
   --BODY Template
   g_body_template CONSTANT VARCHAR2 (32767) 
         := q'[
CREATE OR REPLACE PACKAGE BODY tapi_${table_name} IS

   /**
   -- # TAPI_${table_name}
   -- Generated by: tapiGen2 - DO NOT MODIFY!
   -- Website: github.com/osalvador/tapiGen2
   -- Created On: ${date}
   -- Created By: ${user}
   */

   --GLOBAL_PRIVATE_CURSORS
   --By PK
   CURSOR ${table_name}_cur (      
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)  ));
          END; %>
   )
   IS
      SELECT <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := '${column_name}';
                tePLSQL.print(tapi_gen2.tab_columns('${table_name}',l_template, CHR(10) ||  '           , ' ));
              END; %>
           , tapi_${table_name}.hash(<% DECLARE
                                      l_template VARCHAR2(32767);
                                    BEGIN
                                        l_template := '${column_name}';
                                        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ', '));
                                    END; %>)
           , ROWID
      FROM ${table_name}
      WHERE <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := '${column_name} = ${table_name}_cur.p_${column_name}';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' AND ' || CHR(10) || '            ' ));
              END; %>
      FOR UPDATE;

    --By Rowid
    CURSOR ${table_name}_rowid_cur (p_rowid     IN      varchar2)
    IS
      SELECT <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := '${column_name}';
                tePLSQL.print(tapi_gen2.tab_columns('${table_name}',l_template, CHR(10) ||  '           , ' ));
              END; %>
           , tapi_${table_name}.hash(<% DECLARE
                                      l_template VARCHAR2(32767);
                                    BEGIN
                                        l_template := '${column_name}';
                                        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ', '));
                                    END; %>)
           , ROWID
      FROM ${table_name}
      WHERE ROWID = p_rowid
      FOR UPDATE;    


    FUNCTION hash (
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09) ));
          END; %>
          )
      RETURN varchar2
   IS
      l_retval hash_t;
      l_string CLOB;
   BEGIN

      SELECT <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := ' ${column_name} ';
                tePLSQL.print(tapi_gen2.tab_columns_sans_blobs('${table_name}',l_template, '||' || CHR(10) || '              '));
              END; %>
      INTO l_string
      FROM ${table_name}
      WHERE <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := ' ${column_name} =  hash.p_${column_name}';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' AND ' || CHR(10) || '            ' ));
              END; %>;

      l_retval := DBMS_CRYPTO.hash(l_string, DBMS_CRYPTO.hash_sh1);

      RETURN l_retval;

   END hash;
   
    FUNCTION hash_rowid (p_rowid IN varchar2)
      RETURN varchar2
   IS
      l_retval hash_t;
      l_string CLOB;
   BEGIN

      SELECT <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := ' ${column_name} ';                
                tePLSQL.print(tapi_gen2.tab_columns_sans_blobs('${table_name}',l_template, '||' || CHR(10) || '              '));
              END; %>
      INTO l_string
      FROM ${table_name}
      WHERE  ROWID = p_rowid;

      l_retval := DBMS_CRYPTO.hash(l_string, DBMS_CRYPTO.hash_sh1);

      RETURN l_retval;

   END hash_rowid;   

   FUNCTION rt (
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)));
          END; %>
          )
      RETURN ${table_name}_rt ${result_cache}
   IS
      l_${table_name}_rec ${table_name}_rt;
   BEGIN

      SELECT a.*, tapi_${table_name}.hash(<% DECLARE
                                            l_template VARCHAR2(32767);
                                          BEGIN
                                            l_template := '${column_name}';
                                            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ', '));
                                          END; %>), rowid
      INTO l_${table_name}_rec
      FROM ${table_name} a
      WHERE <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := '${column_name}= rt.p_${column_name}';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' AND ' || CHR(10) ||'            ' ));
              END; %>;

      RETURN l_${table_name}_rec;

   END rt;

   FUNCTION rt_for_update (
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'p_${column_name}     IN      ${table_name}.${column_name}%TYPE';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)));
          END; %>
          )
      RETURN ${table_name}_rt ${result_cache}
   IS
      l_${table_name}_rec ${table_name}_rt;
   BEGIN

      SELECT a.*, tapi_${table_name}.hash(<% DECLARE
                                            l_template VARCHAR2(32767);
                                          BEGIN
                                            l_template := '${column_name}';
                                            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ', '));
                                          END; %>), rowid
      INTO l_${table_name}_rec
      FROM ${table_name} a
      WHERE <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := '${column_name}= rt_for_update.p_${column_name}';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' AND ' || CHR(10) ||'            ' ));
              END; %>
      FOR UPDATE;

      RETURN l_${table_name}_rec;

   END rt_for_update;

    FUNCTION tt (
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'p_${column_name} IN ${table_name}.${column_name}%TYPE DEFAULT NULL';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)));
          END; %>
              )
       RETURN ${table_name}_tt
       PIPELINED
    IS
       l_${table_name}_rec   ${table_name}_rt;
    BEGIN

       FOR c1 IN (SELECT   a.*, ROWID
                    FROM   ${table_name} a
                   WHERE <% DECLARE
                            l_template VARCHAR2(32767);
                          BEGIN
                            l_template := '${column_name}= NVL(p_${column_name},${column_name})';
                            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' AND ' || CHR(10) || '                         ' ));
                          END; %>)                   
       LOOP
              <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := 'l_${table_name}_rec.${column_name} := c1.${column_name};';
                tePLSQL.print(tapi_gen2.tab_columns('${table_name}',l_template, CHR(10)|| '              ' ));                
              END; %>
              
              l_${table_name}_rec.hash := tapi_${table_name}.hash(<% DECLARE
                                            l_template VARCHAR2(32767);
                                          BEGIN
                                            l_template := 'c1.${column_name}';
                                            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ', '));
                                          END; %>);
              l_${table_name}_rec.row_id := c1.ROWID;
              PIPE ROW (l_${table_name}_rec);
       END LOOP;

       RETURN;
    END tt;

    PROCEDURE ins (p_${table_name}_rec IN OUT ${table_name}_rt)
    IS
       l_rowtype     ${table_name}%ROWTYPE;       
       <% IF '${created_by_col_name}' IS NOT NULL 
       OR   '${modified_by_col_name}' IS NOT NULL
       THEN 
            IF '${created_by_col_name}' IS NOT NULL
            then
                tePLSQL.print('l_user_name   ${table_name}.${created_by_col_name}%TYPE := USER;');
                tePLSQL.print(CHR(10)|| '       ');
            ELSE
                tePLSQL.print('l_user_name   ${table_name}.${modified_by_col_name}%TYPE := USER;');
                tePLSQL.print(CHR(10)|| '       ');
            END IF;
       END IF;
       IF '${created_date_col_name}' IS NOT NULL
       Or '${modified_date_col_name}' IS NOT NULL  
       THEN
            IF '${created_date_col_name}' IS NOT NULL
            then 
                tePLSQL.print('l_date        ${table_name}.${created_date_col_name}%TYPE := SYSDATE;');
                tePLSQL.print(CHR(10)|| '       ');
            ELSE
                tePLSQL.print('l_date        ${table_name}.${modified_date_col_name}%TYPE := SYSDATE;');
                tePLSQL.print(CHR(10)|| '       ');
            END IF;
       END IF; %>       
    BEGIN
       <% IF '${created_by_col_name}'IS NOT NULL 
       THEN
        tePLSQL.print('p_${table_name}_rec.${created_by_col_name} := l_user_name;');
        tePLSQL.print(CHR(10)|| '       ');
       END IF;
       IF '${created_date_col_name}' IS NOT NULL 
       THEN 
        tePLSQL.print('p_${table_name}_rec.${created_date_col_name} := l_date;');
        tePLSQL.print(CHR(10)|| '       ');
       END IF;
       IF '${modified_by_col_name}' IS NOT NULL 
       THEN 
        tePLSQL.print('p_${table_name}_rec.${modified_by_col_name} := l_user_name;');
        tePLSQL.print(CHR(10)|| '       ');
       END IF;
       IF '${modified_date_col_name}' IS NOT NULL 
       THEN 
        tePLSQL.print('p_${table_name}_rec.${modified_date_col_name} := l_date;');
        tePLSQL.print(CHR(10)|| '       ');
       END IF; %>
       <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'l_rowtype.${column_name} := p_${table_name}_rec.${column_name}; ';
            tePLSQL.print(tapi_gen2.tab_columns('${table_name}',l_template, CHR(10)|| '       ' ));
          END; %>       
       
       INSERT INTO ${table_name}
         VALUES   l_rowtype;
    END ins;

    PROCEDURE upd (p_${table_name}_rec IN ${table_name}_rt, p_ignore_nulls IN boolean := FALSE)
    IS
    BEGIN
       IF NVL (p_ignore_nulls, FALSE)
       THEN
          UPDATE   ${table_name}
             SET   <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = NVL(p_${table_name}_rec.${column_name},${column_name}) ';
                        tePLSQL.print(tapi_gen2.tab_columns_for_upd('${table_name}',l_template, ',' || CHR(10)||'                   ' ));                        
                      END; %>
           WHERE  <% DECLARE
                            l_template VARCHAR2(32767);
                          BEGIN
                            l_template := '${column_name} = p_${table_name}_rec.${column_name}';
                            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' AND ' || CHR(10) || '                  ' ));
                          END; %>;
       ELSE
          UPDATE   ${table_name}
             SET   <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = p_${table_name}_rec.${column_name} ';
                        tePLSQL.print(tapi_gen2.tab_columns_for_upd('${table_name}',l_template, ',' || CHR(10)|| '                   ' ));
                      END; %>            
           WHERE <% DECLARE
                    l_template VARCHAR2(32767);
                  BEGIN
                    l_template := '${column_name} = p_${table_name}_rec.${column_name}';
                    tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' AND ' || CHR(10) || '                 ' ));
                  END; %>;
       END IF;
       
       IF SQL%ROWCOUNT != 1 THEN RAISE e_upd_failed; END IF;

    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were updated. The update failed.');       
    END upd;
    
    
    PROCEDURE upd_rowid (p_${table_name}_rec IN ${table_name}_rt, p_ignore_nulls IN boolean := FALSE)
    IS
    BEGIN
       IF NVL (p_ignore_nulls, FALSE)
       THEN
          UPDATE   ${table_name}
             SET   <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = NVL(p_${table_name}_rec.${column_name},${column_name}) ';
                        tePLSQL.print(tapi_gen2.tab_columns_for_upd('${table_name}',l_template, ',' || CHR(10)||'                   ' ));
                      END; %>
           WHERE  ROWID = p_${table_name}_rec.row_id;
       ELSE
          UPDATE   ${table_name}
             SET   <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = p_${table_name}_rec.${column_name} ';
                        tePLSQL.print(tapi_gen2.tab_columns_for_upd('${table_name}',l_template, ',' || CHR(10)|| '                   ' ));
                      END; %>            
           WHERE  ROWID = p_${table_name}_rec.row_id;
       END IF;
       
       IF SQL%ROWCOUNT != 1 THEN RAISE e_upd_failed; END IF;

    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were updated. The update failed.');       
    END upd_rowid;

   PROCEDURE web_upd (
      p_${table_name}_rec    IN ${table_name}_rt
    , p_ignore_nulls         IN boolean := FALSE
   )
   IS
      l_${table_name}_rec ${table_name}_rt;
   BEGIN

      OPEN ${table_name}_cur(<% DECLARE
                                l_template VARCHAR2(32767);
                              BEGIN
                                l_template := 'p_${table_name}_rec.${column_name}';
                                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' , ' ));
                              END; %>);
                              
      FETCH ${table_name}_cur INTO l_${table_name}_rec;

      IF ${table_name}_cur%NOTFOUND THEN
         CLOSE ${table_name}_cur;
         RAISE e_row_missing;
      ELSE
         IF p_${table_name}_rec.hash != l_${table_name}_rec.hash THEN
            CLOSE ${table_name}_cur;
            RAISE e_ol_check_failed;
         ELSE
            IF NVL(p_ignore_nulls, FALSE)
            THEN
                UPDATE   ${table_name}
                   SET   <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = NVL(p_${table_name}_rec.${column_name},${column_name}) ';
                        tePLSQL.print(tapi_gen2.tab_columns_for_upd('${table_name}',l_template, ',' || CHR(10)||'                   ' ));
                      END; %>                                     
               WHERE CURRENT OF ${table_name}_cur;
            ELSE
                UPDATE   ${table_name}
                   SET   <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = p_${table_name}_rec.${column_name} ';
                        tePLSQL.print(tapi_gen2.tab_columns_for_upd('${table_name}',l_template, ',' || CHR(10)|| '                   ' ));
                      END; %>   
               WHERE CURRENT OF ${table_name}_cur;
            END IF;

            CLOSE ${table_name}_cur;
         END IF;
      END IF;

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
   END web_upd;
   
   PROCEDURE web_upd_rowid (
      p_${table_name}_rec    IN ${table_name}_rt
    , p_ignore_nulls         IN boolean := FALSE
   )
   IS
      l_${table_name}_rec ${table_name}_rt;
   BEGIN

      OPEN ${table_name}_rowid_cur(p_${table_name}_rec.row_id);
                              
      FETCH ${table_name}_rowid_cur INTO l_${table_name}_rec;

      IF ${table_name}_rowid_cur%NOTFOUND THEN
         CLOSE ${table_name}_rowid_cur;
         RAISE e_row_missing;
      ELSE
         IF p_${table_name}_rec.hash != l_${table_name}_rec.hash THEN
            CLOSE ${table_name}_rowid_cur;
            RAISE e_ol_check_failed;
         ELSE
            IF NVL(p_ignore_nulls, FALSE)
            THEN
                UPDATE   ${table_name}
                     SET  <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = NVL(p_${table_name}_rec.${column_name},${column_name}) ';
                        tePLSQL.print(tapi_gen2.tab_columns_for_upd('${table_name}',l_template, ',' || CHR(10)||'                          ' ));
                      END; %>                                     
               WHERE CURRENT OF ${table_name}_rowid_cur;
            ELSE
                UPDATE   ${table_name}
                 SET  <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = p_${table_name}_rec.${column_name} ';
                        tePLSQL.print(tapi_gen2.tab_columns_for_upd('${table_name}',l_template, ',' || CHR(10)|| '                      ' ));
                      END; %>   
               WHERE CURRENT OF ${table_name}_rowid_cur;
            END IF;

            CLOSE ${table_name}_rowid_cur;
         END IF;
      END IF;

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
   END web_upd_rowid;   

    PROCEDURE del (
        <% DECLARE
            l_template VARCHAR2(32767);
          BEGIN
            l_template := 'p_${column_name} IN ${table_name}.${column_name}%TYPE';
            tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09)|| CHR(09) ));
          END; %>
              )
    IS
    BEGIN
       DELETE FROM   ${table_name}
             WHERE   <% DECLARE
                        l_template VARCHAR2(32767);
                      BEGIN
                        l_template := '${column_name} = del.p_${column_name}';
                        tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ' AND ' || CHR(10) || '                     ' ));
                      END; %>;
       IF sql%ROWCOUNT != 1
       THEN
          RAISE e_del_failed;
       END IF;
    
    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were deleted. The delete failed.');
    END del;
    
    PROCEDURE del_rowid (p_rowid IN varchar2)
    IS
    BEGIN
       DELETE FROM   ${table_name}
             WHERE   ROWID = p_rowid;
             
       IF sql%ROWCOUNT != 1
       THEN
          RAISE e_del_failed;
       END IF;
    
    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were deleted. The delete failed.');
    END del_rowid;    
                        
    PROCEDURE web_del (
        <% DECLARE
                l_template VARCHAR2(32767);
              BEGIN
                l_template := 'p_${column_name} IN ${table_name}.${column_name}%TYPE';
                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ',' || CHR(10) || CHR(09) || CHR(09)));
              END; %>
      , p_hash IN varchar2
   )
   IS
      l_${table_name}_rec ${table_name}_rt;
   BEGIN

      OPEN ${table_name}_cur(<% DECLARE
                                l_template VARCHAR2(32767);
                              BEGIN
                                l_template := 'web_del.p_${column_name}';
                                tePLSQL.print(tapi_gen2.pk_columns('${table_name}',l_template, ', ' ));
                              END; %>);
                              
      FETCH ${table_name}_cur INTO l_${table_name}_rec;

      IF ${table_name}_cur%NOTFOUND THEN
         CLOSE ${table_name}_cur;
         RAISE e_row_missing;
      ELSE
         IF p_hash != l_${table_name}_rec.hash THEN
            CLOSE ${table_name}_cur;
            RAISE e_ol_check_failed;
         ELSE
            DELETE FROM ${table_name}
            WHERE CURRENT OF ${table_name}_cur;

            CLOSE ${table_name}_cur;
         END IF;
      END IF;

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
   END web_del;

   PROCEDURE web_del_rowid (p_rowid IN varchar2, p_hash IN varchar2)
   IS
      l_${table_name}_rec ${table_name}_rt;
   BEGIN

      OPEN ${table_name}_rowid_cur(web_del_rowid.p_rowid);
                              
      FETCH ${table_name}_rowid_cur INTO l_${table_name}_rec;

      IF ${table_name}_rowid_cur%NOTFOUND THEN
         CLOSE ${table_name}_rowid_cur;
         RAISE e_row_missing;
      ELSE
         IF web_del_rowid.p_hash != l_${table_name}_rec.hash THEN
            CLOSE ${table_name}_rowid_cur;
            RAISE e_ol_check_failed;
         ELSE
            DELETE FROM ${table_name}
            WHERE CURRENT OF ${table_name}_rowid_cur;

            CLOSE ${table_name}_rowid_cur;
         END IF;
      END IF;

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
   END web_del_rowid;

END tapi_${table_name};]' ;

   --Global public data structures
   SUBTYPE dbo_name_t IS VARCHAR2 (30); -- Max size for a DB object name

   TYPE dbo_name_aat IS TABLE OF dbo_name_t;
   
   
   /**
    --## Function Name: CREATE_TAPI_PACKAGE
    --### Description:
    --       Create PL/SQL Table API
    --
    --### IN Paramters
    --    | Name | Type | Description
    --    | -- | -- | --    
    --    |p_table_name | VARCHAR2 | must be NOT NULL
    --    |p_compile_table_api | BOOLEAN | TRUE for compile generated package, FALSE to DBMS_OUTPUT the source
    --    |p_unique_key | VARCHAR2 | If the table has no primary key, it indicates the column that will be used as a unique key
    --    |p_created_by_col_name | VARCHAR2 | Custom audit column
    --    |p_created_date_col_name | VARCHAR2 | Custom audit column
    --    |p_modified_by_col_name | VARCHAR2 | Custom audit column
    --    |p_modified_date_col_name | VARCHAR2 | Custom audit column     
    --### Amendments
    --| When         | Who                      | What
    --|--------------|--------------------------|------------------
    --|16-JUL-2015   | osalvador                | Created
    */   
   PROCEDURE create_tapi_package (p_table_name               IN VARCHAR2
                                , p_compile_table_api        IN BOOLEAN DEFAULT TRUE
                                , p_unique_key               IN VARCHAR2 DEFAULT NULL
                                , p_created_by_col_name      IN VARCHAR2 DEFAULT NULL
                                , p_created_date_col_name    IN VARCHAR2 DEFAULT NULL
                                , p_modified_by_col_name     IN VARCHAR2 DEFAULT NULL
                                , p_modified_date_col_name   IN VARCHAR2 DEFAULT NULL);

   --Public functions but for internal use. 
   FUNCTION pk_col_name (p_table_name IN VARCHAR2)
      RETURN dbo_name_aat
      PIPELINED;

   FUNCTION tab_columns (p_table_name IN VARCHAR2, p_template IN VARCHAR2, p_delimiter IN VARCHAR2)
      RETURN VARCHAR2;
   
   FUNCTION pk_columns (p_table_name IN VARCHAR2, p_template IN VARCHAR2, p_delimiter IN VARCHAR2)
      RETURN VARCHAR2;
      
   FUNCTION tab_columns_sans_blobs (p_table_name IN VARCHAR2, p_template IN VARCHAR2, p_delimiter IN VARCHAR2)
      RETURN VARCHAR2;
      
   FUNCTION tab_columns_for_upd (p_table_name IN VARCHAR2, p_template IN VARCHAR2, p_delimiter IN VARCHAR2)
      RETURN VARCHAR2;               
    
END tapi_gen2;
/
